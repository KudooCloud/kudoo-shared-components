import React, { Component } from 'react';
import { theming, Theme } from 'components/config/theme';
import cx from 'classnames';
import _ from 'lodash';
import PropTypes from 'prop-types';
import injectSheet from 'react-jss';

export type WrapperProps = {
  classes?: any;
};

const withStyles = <P extends object>(styles) => (
  component: React.ComponentType<P>
): React.ComponentClass<P> => {
  const StyledComponent = injectSheet(styles, { theming })(component);

  class Wrapper extends React.Component<P & WrapperProps> {
    static displayName = StyledComponent.displayName;
    styledComponent: any;

    state = {
      classes: {},
    };

    _mergeClasses = (props) => {
      // Merge classes generated by JSS and user classes
      let oldClasses = this.styledComponent.state.classes;
      let userClasses = props.classes || {};
      Object.keys(oldClasses).forEach((classKey) => {
        oldClasses[classKey] = cx(oldClasses[classKey], userClasses[classKey]);
      });
      this.setState({ classes: oldClasses });
    };

    componentDidMount() {
      this._mergeClasses(this.props);
    }

    componentDidUpdate(prevProps) {
      if (!_.isEqual(this.props.classes, prevProps.classes)) {
        this._mergeClasses(this.props);
      }
    }

    render() {
      let { classes, ...rest } = this.props; // eslint-disable-line
      return (
        <StyledComponent
          ref={(ref) => {
            this.styledComponent = ref;
          }}
          {...rest}
          classes={this.state.classes}
        />
      );
    }
  }
  return Wrapper;
};

export const composeStyles = (...styles) => (theme: Theme) => {
  let mergedStyles = {};
  styles.forEach((v, i) => {
    const style = v(theme);
    mergedStyles = {
      ...mergedStyles,
      ...style,
    };
  });
  return mergedStyles;
};

export default withStyles;
